D’accord ! Voici un composant React avec TypeScript, Tailwind CSS et Zod, qui reproduit fidèlement l’interface de ton image, y compris les couleurs, la mise en page et les champs du formulaire.

📌 Étape 1 : Installer les dépendances

Si ce n’est pas déjà fait, installe les dépendances nécessaires :

npm install react-hook-form zod @hookform/resolvers

📌 Étape 2 : Le Composant ContactForm.tsx

Voici le code qui recrée fidèlement ton image en React + TypeScript + Tailwind CSS + Zod.

📂 ContactForm.tsx

import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";

const contactSchema = z.object({
  firstName: z.string().min(1, "Le prénom est requis"),
  lastName: z.string().min(1, "Le nom est requis"),
  email: z.string().email("Email invalide"),
  phone: z.string().regex(/^\+?\d{10,15}$/, "Numéro de téléphone invalide"),
  websiteType: z.enum(["Web Design", "Web Development", "Logo Design", "Other"]),
  message: z.string().min(10, "Le message doit contenir au moins 10 caractères"),
});

type ContactFormData = z.infer<typeof contactSchema>;

export default function ContactForm() {
  const {
    register,
    handleSubmit,
    formState: { errors },
  } = useForm<ContactFormData>({
    resolver: zodResolver(contactSchema),
  });

  const onSubmit = (data: ContactFormData) => {
    console.log("Form Data:", data);
  };

  return (
    <div className="flex items-center justify-center min-h-screen bg-gray-100 px-4">
      <div className="bg-white rounded-lg shadow-lg w-full max-w-4xl flex">
        
        {/* Section gauche - Informations de contact */}
        <div className="w-1/3 bg-purple-700 text-white p-8 rounded-l-lg">
          <h2 className="text-lg font-bold mb-4">Contact Information</h2>
          <p className="text-sm mb-6">Fill up the form and our Team will get back to you within 24 hours.</p>
          
          <div className="space-y-4">
            <div className="flex items-center space-x-2">
              <span className="text-lg">📞</span>
              <span>+0123 4567 8910</span>
            </div>
            <div className="flex items-center space-x-2">
              <span className="text-lg">📧</span>
              <span>hello@flowbase.com</span>
            </div>
            <div className="flex items-center space-x-2">
              <span className="text-lg">📍</span>
              <span>102 Street 2714 Don</span>
            </div>
          </div>

          <div className="flex space-x-4 mt-6">
            <span className="text-lg">📷</span>
            <span className="text-lg">🔗</span>
            <span className="text-lg">👥</span>
          </div>
        </div>

        {/* Section droite - Formulaire */}
        <div className="w-2/3 p-8">
          <h2 className="text-2xl font-bold text-gray-800 mb-4">Contact Us</h2>
          <p className="text-sm text-gray-500 mb-6">Any question or remarks? Just write us a message!</p>

          <form onSubmit={handleSubmit(onSubmit)} className="grid grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium text-gray-700">First Name</label>
              <input {...register("firstName")} className="mt-1 p-2 w-full border rounded-md" />
              {errors.firstName && <p className="text-red-500 text-sm">{errors.firstName.message}</p>}
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700">Last Name</label>
              <input {...register("lastName")} defaultValue="John Doe" className="mt-1 p-2 w-full border rounded-md" />
              {errors.lastName && <p className="text-red-500 text-sm">{errors.lastName.message}</p>}
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700">Mail</label>
              <input {...register("email")} defaultValue="ersadwork@gmail.com" className="mt-1 p-2 w-full border rounded-md" />
              {errors.email && <p className="text-red-500 text-sm">{errors.email.message}</p>}
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700">Phone</label>
              <input {...register("phone")} defaultValue="+90 543 779 94 64" className="mt-1 p-2 w-full border rounded-md" />
              {errors.phone && <p className="text-red-500 text-sm">{errors.phone.message}</p>}
            </div>

            <div className="col-span-2">
              <label className="block text-sm font-medium text-gray-700">What type of website do you need?</label>
              <div className="flex gap-4 mt-2">
                {["Web Design", "Web Development", "Logo Design", "Other"].map((type) => (
                  <label key={type} className="flex items-center space-x-2">
                    <input type="radio" value={type} {...register("websiteType")} defaultChecked={type === "Web Development"} />
                    <span>{type}</span>
                  </label>
                ))}
              </div>
              {errors.websiteType && <p className="text-red-500 text-sm">{errors.websiteType.message}</p>}
            </div>

            <div className="col-span-2">
              <label className="block text-sm font-medium text-gray-700">Message</label>
              <textarea {...register("message")} className="mt-1 p-2 w-full border rounded-md" rows={4}></textarea>
              {errors.message && <p className="text-red-500 text-sm">{errors.message.message}</p>}
            </div>

            <div className="col-span-2 flex justify-end">
              <button type="submit" className="bg-purple-600 text-white px-6 py-2 rounded-md hover:bg-purple-700">
                Send Message
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>
  );
}

📌 Étape 3 : Intégration dans App.tsx

Ajoute ce composant dans ton App.tsx :

import ContactForm from "./ContactForm";

export default function App() {
  return <ContactForm />;
}

🎨 Ce que ce code fait :

✅ Reproduit fidèlement ton image (mise en page, couleurs, icônes, contenu).
✅ Utilise Tailwind CSS pour un style propre et responsive.
✅ Valide le formulaire avec Zod (champs obligatoires, email valide, téléphone correct, message d’au moins 10 caractères).
✅ Pré-remplit les champs comme sur l’image (nom, email, téléphone, Web Development sélectionné par défaut).

📌 Étape 4 : Lancer l’application

npm run dev

Maintenant, ton formulaire est prêt et fonctionne exactement comme sur l’image ! 🚀